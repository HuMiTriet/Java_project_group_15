package com.fifteen.auth.login;

import com.fifteen.auth.security.RegexChecker;
import com.fifteen.auth.signUp.SignUpPage;
import com.fifteen.database.DBMethod;
import com.fifteen.events.EventPageMain;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;

/**
 * Added in email pattern checking to see if email is in correct format (the
 * format is must have @ sign, after dot must have at least 2 letters), also
 * check if email entered
 * exists on the database. If the entered email existed and the password is
 * correct then
 * switch to the main event page. The testing account: email: t@g.com |
 * password: B
 * 
 * @author Ante, PJ
 */
public class LoginPage extends JFrame {
  private JTextField email;
  private JPanel loginPanel;
  private JPasswordField password;
  private JButton login;
  private JButton signUp;
  private JCheckBox admin;
  private JLabel emailLabel;
  private JLabel passwordLabel;
  private JCheckBox showPassword;
  private JFrame frame;
  private boolean isAdminUser = false;

  public LoginPage() {
    frame = new JFrame("Login Frame");
    frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
    frame.setPreferredSize(new Dimension(250, 200));
    frame.setResizable(false);

    // adding the panel
    frame.add(loginPanel);
    frame.pack();
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);

    login.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        DBMethod.createConnection();
        String enteredEmail = email.getText();
        String stringPassword = new String(password.getPassword());

        // Check to see if email enter is in the correct format
        if (RegexChecker.checkEmail(enteredEmail)) {
          emailLabel.setText("");
        } else {
          emailLabel.setText("Invalid email format");
          return;
        }

        try {
          if (DBMethod.checkfieldExisted(enteredEmail, 'e')) {
            emailLabel.setText("");
          } else {
            emailLabel.setText("An account with this email doesn't exist'");
            return;
          }

          if (UserAuthenticator.authenticate(enteredEmail, stringPassword)) {
            if (isAdminUser == false) {
              // passwordLabel.setText("Logging in as normal user");
              new EventPageMain();
              frame.dispose();
              DBMethod.closeConnection();
            } else {
              new EventPageMain();
              frame.dispose();
              DBMethod.closeConnection();
              // passwordLabel.setText("Logging in as admin");
            }
          } else {
            passwordLabel.setText("Incorrect password");
            return;
          }
        } catch (SQLException ex) {
          JOptionPane.showMessageDialog(null, "Failed authenticating user,"
              + " Please check your internet connection");

          DBMethod.closeConnection();
          ex.printStackTrace();
        }

      }
    });

    showPassword.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        if (showPassword.isSelected()) {
          password.setEchoChar((char) 0);
        } else {
          // unicode character bullet
          password.setEchoChar('\u2022');
        }
      }
    });

    signUp.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        new SignUpPage();
        DBMethod.closeConnection();
        frame.dispose();
      }
    });
    admin.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        if (admin.isSelected()) {
          isAdminUser = true;
        } else {
          isAdminUser = false;
        }
      }
    });
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    loginPanel = new JPanel();
    loginPanel.setLayout(new GridLayoutManager(11, 6, new Insets(0, 0, 0, 0), -1, -1));
    email = new JTextField();
    email.setText("");
    loginPanel.add(email,
        new GridConstraints(3, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null,
            0, false));
    password = new JPasswordField();
    loginPanel.add(password,
        new GridConstraints(7, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null,
            0, false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 7, new Insets(0, 0, 0, 0), -1, -1));
    loginPanel.add(panel1,
        new GridConstraints(9, 1, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    login = new JButton();
    login.setText("Login");
    panel1.add(login,
        new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    panel1.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    final Spacer spacer2 = new Spacer();
    panel1.add(spacer2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    admin = new JCheckBox();
    admin.setText("Admin");
    panel1.add(admin,
        new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer3 = new Spacer();
    panel1.add(spacer3, new GridConstraints(0, 6, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    signUp = new JButton();
    signUp.setText("Sign Up");
    panel1.add(signUp,
        new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer4 = new Spacer();
    panel1.add(spacer4, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
        GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    final Spacer spacer5 = new Spacer();
    loginPanel.add(spacer5, new GridConstraints(4, 1, 1, 4, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final Spacer spacer6 = new Spacer();
    loginPanel.add(spacer6, new GridConstraints(0, 1, 1, 4, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final Spacer spacer7 = new Spacer();
    loginPanel.add(spacer7, new GridConstraints(4, 5, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    final Spacer spacer8 = new Spacer();
    loginPanel.add(spacer8, new GridConstraints(8, 1, 1, 3, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final Spacer spacer9 = new Spacer();
    loginPanel.add(spacer9, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    final JLabel label1 = new JLabel();
    label1.setText("Email");
    loginPanel.add(label1, new GridConstraints(1, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
        GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JLabel label2 = new JLabel();
    label2.setText("Password");
    loginPanel.add(label2, new GridConstraints(5, 1, 1, 4, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
        GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer10 = new Spacer();
    loginPanel.add(spacer10, new GridConstraints(2, 3, 1, 2, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    final Spacer spacer11 = new Spacer();
    loginPanel.add(spacer11, new GridConstraints(10, 1, 1, 4, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    emailLabel = new JLabel();
    emailLabel.setText("");
    loginPanel.add(emailLabel, new GridConstraints(2, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
        GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    passwordLabel = new JLabel();
    passwordLabel.setText("");
    loginPanel.add(passwordLabel,
        new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    showPassword = new JCheckBox();
    showPassword.setText("Show passowrd");
    loginPanel.add(showPassword,
        new GridConstraints(8, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer12 = new Spacer();
    loginPanel.add(spacer12, new GridConstraints(6, 4, 1, 1, GridConstraints.ANCHOR_CENTER,
        GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return loginPanel;
  }

}
