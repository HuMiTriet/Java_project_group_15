package com.fifteen.events.sync;

import java.awt.Dimension;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.sql.SQLException;

import javax.swing.*;

import com.fifteen.auth.security.PasswordHasher;
import com.fifteen.auth.security.UserAuthenticator;
import com.fifteen.database.DBMethod;
import com.fifteen.database.User;
import com.fifteen.database.UserDao;
import com.fifteen.database.UserDaoImp;
import com.fifteen.events.CalendarView;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

/**
 * This class is used to display the re-authentication page. This page is
 * displayed when the user is in offline mode and clicked on the sync button.
 *
 * @athor Triet Huynh
 */
public class reAuthenticatePage extends JFrame {
  private JTextField emailTextField;
  private JButton submitButton;
  private JLabel displayMessage;
  private JLabel displayEmail;
  private JLabel emailJlabel;
  private JLabel passwordJlabel;
  private JLabel displayPassword;
  private JPanel reAuthPanel;
  private JCheckBox showPasswordCheckBox;
  private JPasswordField passwordField;
  private JFrame frame;

  public reAuthenticatePage(JFrame parentFrame) {

    frame = new JFrame("Re-Authenticate");

    frame.setDefaultCloseOperation(EXIT_ON_CLOSE);
    frame.setPreferredSize(new Dimension(400, 300));
    frame.setResizable(false);

    frame.add(reAuthPanel);
    frame.pack();
    frame.setLocationRelativeTo(null);
    frame.setVisible(true);
    submitButton.addActionListener(new ActionListener() {
      /**
       * Check information that the user entered if correct upload to
       * remote database
       *
       * @param e the event to be processed
       * @author Triet Huynh
       */

      @Override
      public void actionPerformed(ActionEvent e) {
        String enteredEmail = emailTextField.getText();
        String enteredPassword = new String(passwordField.getPassword());
        boolean allFieldsCorrect = true;
        DBMethod.createConnection();

        if (UserAuthenticator.checkEmailFormat(emailJlabel, enteredEmail) == false) {
          allFieldsCorrect = false;
        }

        if (UserAuthenticator.checkFieldEmpty(passwordJlabel, enteredPassword, "Please enter your password") == false) {
          allFieldsCorrect = false;
        }

        if (allFieldsCorrect) {
          if (UserAuthenticator.authenticateUser(passwordJlabel, enteredEmail, enteredPassword) == true) {
            UserDao userHandler = new UserDaoImp();
            User loginUser = userHandler.createUserFromLogin(enteredEmail);

            String hashedPassword = PasswordHasher.sha2(enteredPassword);
            try {
              DBMethod.fillInUserInfoFromUserEmail(loginUser, hashedPassword);
              localDatabaseFile.uploadLocalDatabase(loginUser);

              new CalendarView(loginUser);

              frame.dispose();
              parentFrame.dispose();
            } catch (SQLException | IOException e1) {
              e1.printStackTrace();
            }
          }

        }
      }
    });
    showPasswordCheckBox.addActionListener(new ActionListener() {
      /**
       * Invoked when an action occurs.
       *
       * @param e the event to be processed
       */
      @Override
      public void actionPerformed(ActionEvent e) {
        if (showPasswordCheckBox.isSelected()) {
          passwordField.setEchoChar((char) 0);
        } else {
          // unicode character bullet
          passwordField.setEchoChar('\u2022');
        }
      }
    });
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    reAuthPanel = new JPanel();
    reAuthPanel.setLayout(new GridLayoutManager(9, 1, new Insets(0, 0, 0, 0), -1, -1));
    emailTextField = new JTextField();
    reAuthPanel.add(emailTextField,
        new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null,
            0, false));
    submitButton = new JButton();
    submitButton.setText("Submit");
    reAuthPanel.add(submitButton,
        new GridConstraints(8, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    emailJlabel = new JLabel();
    emailJlabel.setText("");
    reAuthPanel.add(emailJlabel,
        new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    passwordJlabel = new JLabel();
    passwordJlabel.setText("");
    reAuthPanel.add(passwordJlabel,
        new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    displayMessage = new JLabel();
    displayMessage.setHorizontalAlignment(0);
    displayMessage.setHorizontalTextPosition(0);
    displayMessage.setText("Please enter your email and password to sync your work");
    reAuthPanel.add(displayMessage,
        new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    displayEmail = new JLabel();
    displayEmail.setText("Email");
    reAuthPanel.add(displayEmail,
        new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    displayPassword = new JLabel();
    displayPassword.setText("Password");
    reAuthPanel.add(displayPassword,
        new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    showPasswordCheckBox = new JCheckBox();
    showPasswordCheckBox.setText("Show Password");
    reAuthPanel.add(showPasswordCheckBox,
        new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    passwordField = new JPasswordField();
    reAuthPanel.add(passwordField,
        new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null,
            0, false));
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return reAuthPanel;
  }

  private void createUIComponents() {
  }

}
